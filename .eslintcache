[{"/Users/cpojer/Dropbox/Projects/joymap/eslint.config.js":"1","/Users/cpojer/Dropbox/Projects/joymap/prettier.config.js":"2","/Users/cpojer/Dropbox/Projects/joymap/src/JoyMap.ts":"3","/Users/cpojer/Dropbox/Projects/joymap/src/baseModule/base.ts":"4","/Users/cpojer/Dropbox/Projects/joymap/src/baseModule/baseUtils.ts":"5","/Users/cpojer/Dropbox/Projects/joymap/src/baseModule/rumble.ts":"6","/Users/cpojer/Dropbox/Projects/joymap/src/common/utils.ts":"7","/Users/cpojer/Dropbox/Projects/joymap/src/index.ts":"8","/Users/cpojer/Dropbox/Projects/joymap/src/queryModule/query.ts":"9","/Users/cpojer/Dropbox/Projects/joymap/src/types.ts":"10"},{"size":218,"mtime":1737637181744,"results":"11","hashOfConfig":"12"},{"size":93,"mtime":1737636893877,"results":"13","hashOfConfig":"12"},{"size":3765,"mtime":1700056283000,"results":"14","hashOfConfig":"15"},{"size":9135,"mtime":1700056533000,"results":"16","hashOfConfig":"15"},{"size":2027,"mtime":1700055540000,"results":"17","hashOfConfig":"15"},{"size":2918,"mtime":1700056596000,"results":"18","hashOfConfig":"15"},{"size":4013,"mtime":1700056600000,"results":"19","hashOfConfig":"15"},{"size":384,"mtime":1700057049000,"results":"20","hashOfConfig":"15"},{"size":5053,"mtime":1729306280922,"results":"21","hashOfConfig":"15"},{"size":1636,"mtime":1700054166000,"results":"22","hashOfConfig":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},"dti6ii",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":null},"1fom0xi",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":27,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":null},"/Users/cpojer/Dropbox/Projects/joymap/eslint.config.js",["53"],[],"/Users/cpojer/Dropbox/Projects/joymap/prettier.config.js",[],[],"/Users/cpojer/Dropbox/Projects/joymap/src/JoyMap.ts",["54","55","56","57","58","59","60","61"],[],"/Users/cpojer/Dropbox/Projects/joymap/src/baseModule/base.ts",["62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91"],[],"/Users/cpojer/Dropbox/Projects/joymap/src/baseModule/baseUtils.ts",["92","93","94","95","96","97"],[],"/Users/cpojer/Dropbox/Projects/joymap/src/baseModule/rumble.ts",["98","99","100"],[],"/Users/cpojer/Dropbox/Projects/joymap/src/common/utils.ts",["101","102","103","104","105","106"],[],"/Users/cpojer/Dropbox/Projects/joymap/src/index.ts",[],[],"/Users/cpojer/Dropbox/Projects/joymap/src/queryModule/query.ts",["107","108","109","110","111","112","113","114","115","116","117"],[],"/Users/cpojer/Dropbox/Projects/joymap/src/types.ts",["118","119","120","121","122","123","124","125","126","127","128","129","130","131"],[],{"ruleId":"132","severity":2,"message":"133","line":10,"column":7,"nodeType":"134","endLine":10,"endColumn":24,"fix":"135"},{"ruleId":"136","severity":2,"message":"137","line":8,"column":3,"nodeType":"138","messageId":"139","endLine":8,"endColumn":24,"fix":"140"},{"ruleId":"132","severity":2,"message":"141","line":23,"column":5,"nodeType":"134","endLine":23,"endColumn":16,"fix":"142"},{"ruleId":"132","severity":2,"message":"143","line":59,"column":5,"nodeType":"134","endLine":59,"endColumn":14,"fix":"144"},{"ruleId":"132","severity":2,"message":"145","line":63,"column":5,"nodeType":"134","endLine":63,"endColumn":19,"fix":"146"},{"ruleId":"132","severity":2,"message":"147","line":67,"column":5,"nodeType":"134","endLine":67,"endColumn":16,"fix":"148"},{"ruleId":"132","severity":2,"message":"149","line":78,"column":5,"nodeType":"134","endLine":78,"endColumn":19,"fix":"150"},{"ruleId":"132","severity":2,"message":"151","line":83,"column":5,"nodeType":"134","endLine":83,"endColumn":14,"fix":"152"},{"ruleId":"132","severity":2,"message":"153","line":99,"column":5,"nodeType":"134","endLine":99,"endColumn":17,"fix":"154"},{"ruleId":"136","severity":2,"message":"155","line":31,"column":3,"nodeType":"138","messageId":"139","endLine":31,"endColumn":27},{"ruleId":"136","severity":2,"message":"156","line":35,"column":3,"nodeType":"138","messageId":"139","endLine":35,"endColumn":28,"fix":"157"},{"ruleId":"136","severity":2,"message":"158","line":38,"column":3,"nodeType":"138","messageId":"139","endLine":38,"endColumn":35,"fix":"159"},{"ruleId":"132","severity":2,"message":"160","line":61,"column":5,"nodeType":"134","endLine":61,"endColumn":19,"fix":"161"},{"ruleId":"132","severity":2,"message":"162","line":67,"column":7,"nodeType":"134","endLine":67,"endColumn":22,"fix":"163"},{"ruleId":"132","severity":2,"message":"164","line":69,"column":5,"nodeType":"134","endLine":69,"endColumn":21,"fix":"165"},{"ruleId":"132","severity":2,"message":"166","line":72,"column":5,"nodeType":"134","endLine":72,"endColumn":12,"fix":"167"},{"ruleId":"132","severity":2,"message":"168","line":81,"column":5,"nodeType":"134","endLine":81,"endColumn":15,"fix":"169"},{"ruleId":"132","severity":2,"message":"170","line":85,"column":5,"nodeType":"134","endLine":85,"endColumn":12,"fix":"171"},{"ruleId":"132","severity":2,"message":"172","line":133,"column":5,"nodeType":"134","endLine":133,"endColumn":17,"fix":"173"},{"ruleId":"132","severity":2,"message":"174","line":200,"column":5,"nodeType":"134","endLine":200,"endColumn":17,"fix":"175"},{"ruleId":"176","severity":2,"message":"177","line":209,"column":9,"nodeType":"134","messageId":"178","endLine":209,"endColumn":28,"fix":"179"},{"ruleId":"136","severity":2,"message":"180","line":213,"column":9,"nodeType":"138","messageId":"139","endLine":213,"endColumn":31},{"ruleId":"136","severity":2,"message":"181","line":214,"column":9,"nodeType":"138","messageId":"139","endLine":214,"endColumn":31,"fix":"182"},{"ruleId":"132","severity":2,"message":"183","line":221,"column":9,"nodeType":"134","endLine":221,"endColumn":21,"fix":"184"},{"ruleId":"132","severity":2,"message":"185","line":223,"column":9,"nodeType":"134","endLine":223,"endColumn":20,"fix":"186"},{"ruleId":"132","severity":2,"message":"187","line":224,"column":9,"nodeType":"134","endLine":224,"endColumn":20,"fix":"188"},{"ruleId":"132","severity":2,"message":"189","line":225,"column":9,"nodeType":"134","endLine":225,"endColumn":20,"fix":"190"},{"ruleId":"132","severity":2,"message":"191","line":229,"column":5,"nodeType":"134","endLine":229,"endColumn":15,"fix":"192"},{"ruleId":"176","severity":2,"message":"177","line":234,"column":9,"nodeType":"134","messageId":"178","endLine":234,"endColumn":27,"fix":"193"},{"ruleId":"136","severity":2,"message":"180","line":238,"column":9,"nodeType":"138","messageId":"139","endLine":238,"endColumn":31},{"ruleId":"136","severity":2,"message":"181","line":239,"column":9,"nodeType":"138","messageId":"139","endLine":239,"endColumn":31,"fix":"194"},{"ruleId":"132","severity":2,"message":"183","line":246,"column":9,"nodeType":"134","endLine":246,"endColumn":21,"fix":"195"},{"ruleId":"132","severity":2,"message":"185","line":248,"column":9,"nodeType":"134","endLine":248,"endColumn":20,"fix":"196"},{"ruleId":"132","severity":2,"message":"187","line":249,"column":9,"nodeType":"134","endLine":249,"endColumn":20,"fix":"197"},{"ruleId":"132","severity":2,"message":"189","line":250,"column":9,"nodeType":"134","endLine":250,"endColumn":20,"fix":"198"},{"ruleId":"132","severity":2,"message":"199","line":254,"column":5,"nodeType":"134","endLine":254,"endColumn":22,"fix":"200"},{"ruleId":"132","severity":2,"message":"201","line":326,"column":5,"nodeType":"134","endLine":326,"endColumn":22,"fix":"202"},{"ruleId":"203","severity":2,"message":"204","line":328,"column":7,"nodeType":"205","messageId":"206","endLine":335,"endColumn":8,"fix":"207"},{"ruleId":"132","severity":2,"message":"208","line":344,"column":5,"nodeType":"134","endLine":344,"endColumn":14,"fix":"209"},{"ruleId":"176","severity":2,"message":"210","line":23,"column":5,"nodeType":"134","messageId":"178","endLine":23,"endColumn":17,"fix":"211"},{"ruleId":"132","severity":2,"message":"212","line":75,"column":5,"nodeType":"134","endLine":75,"endColumn":13,"fix":"213"},{"ruleId":"132","severity":2,"message":"214","line":78,"column":5,"nodeType":"134","endLine":78,"endColumn":7,"fix":"215"},{"ruleId":"132","severity":2,"message":"216","line":84,"column":5,"nodeType":"134","endLine":84,"endColumn":6,"fix":"217"},{"ruleId":"132","severity":2,"message":"218","line":89,"column":5,"nodeType":"134","endLine":89,"endColumn":11,"fix":"219"},{"ruleId":"132","severity":2,"message":"220","line":90,"column":5,"nodeType":"134","endLine":90,"endColumn":9,"fix":"221"},{"ruleId":"132","severity":2,"message":"162","line":16,"column":7,"nodeType":"134","endLine":16,"endColumn":22,"fix":"222"},{"ruleId":"132","severity":2,"message":"162","line":23,"column":5,"nodeType":"134","endLine":23,"endColumn":20,"fix":"223"},{"ruleId":"132","severity":2,"message":"224","line":89,"column":5,"nodeType":"134","endLine":89,"endColumn":13,"fix":"225"},{"ruleId":"226","severity":2,"message":"227","line":68,"column":10,"nodeType":"228","messageId":"229","endLine":68,"endColumn":24,"fix":"230"},{"ruleId":"132","severity":2,"message":"231","line":115,"column":5,"nodeType":"134","endLine":115,"endColumn":12,"fix":"232"},{"ruleId":"132","severity":2,"message":"233","line":116,"column":5,"nodeType":"134","endLine":116,"endColumn":16,"fix":"234"},{"ruleId":"132","severity":2,"message":"231","line":164,"column":5,"nodeType":"134","endLine":164,"endColumn":12,"fix":"235"},{"ruleId":"132","severity":2,"message":"233","line":165,"column":5,"nodeType":"134","endLine":165,"endColumn":16,"fix":"236"},{"ruleId":"132","severity":2,"message":"237","line":166,"column":5,"nodeType":"134","endLine":166,"endColumn":12,"fix":"238"},{"ruleId":"132","severity":2,"message":"231","line":17,"column":3,"nodeType":"134","endLine":17,"endColumn":10,"fix":"239"},{"ruleId":"132","severity":2,"message":"233","line":18,"column":3,"nodeType":"134","endLine":18,"endColumn":14,"fix":"240"},{"ruleId":"132","severity":2,"message":"237","line":19,"column":3,"nodeType":"134","endLine":19,"endColumn":10,"fix":"241"},{"ruleId":"132","severity":2,"message":"231","line":25,"column":3,"nodeType":"134","endLine":25,"endColumn":10,"fix":"242"},{"ruleId":"132","severity":2,"message":"233","line":26,"column":3,"nodeType":"134","endLine":26,"endColumn":14,"fix":"243"},{"ruleId":"176","severity":2,"message":"244","line":30,"column":18,"nodeType":"134","messageId":"178","endLine":30,"endColumn":36,"fix":"245"},{"ruleId":"132","severity":2,"message":"246","line":76,"column":5,"nodeType":"134","endLine":76,"endColumn":18,"fix":"247"},{"ruleId":"132","severity":2,"message":"248","line":136,"column":5,"nodeType":"134","endLine":136,"endColumn":17,"fix":"249"},{"ruleId":"132","severity":2,"message":"250","line":181,"column":5,"nodeType":"134","endLine":181,"endColumn":18,"fix":"251"},{"ruleId":"132","severity":2,"message":"252","line":193,"column":5,"nodeType":"134","endLine":193,"endColumn":17,"fix":"253"},{"ruleId":"132","severity":2,"message":"254","line":197,"column":5,"nodeType":"134","endLine":197,"endColumn":17,"fix":"255"},{"ruleId":"136","severity":2,"message":"256","line":8,"column":3,"nodeType":"138","messageId":"139","endLine":8,"endColumn":20,"fix":"257"},{"ruleId":"136","severity":2,"message":"258","line":9,"column":3,"nodeType":"138","messageId":"139","endLine":9,"endColumn":24,"fix":"259"},{"ruleId":"136","severity":2,"message":"256","line":15,"column":3,"nodeType":"138","messageId":"139","endLine":15,"endColumn":20},{"ruleId":"136","severity":2,"message":"258","line":16,"column":3,"nodeType":"138","messageId":"139","endLine":16,"endColumn":24,"fix":"260"},{"ruleId":"136","severity":2,"message":"261","line":17,"column":3,"nodeType":"138","messageId":"139","endLine":17,"endColumn":22,"fix":"262"},{"ruleId":"136","severity":2,"message":"137","line":32,"column":3,"nodeType":"138","messageId":"139","endLine":32,"endColumn":25,"fix":"263"},{"ruleId":"136","severity":2,"message":"155","line":38,"column":3,"nodeType":"138","messageId":"139","endLine":38,"endColumn":28,"fix":"264"},{"ruleId":"136","severity":2,"message":"265","line":46,"column":7,"nodeType":"138","messageId":"139","endLine":46,"endColumn":32,"fix":"266"},{"ruleId":"136","severity":2,"message":"265","line":53,"column":3,"nodeType":"138","messageId":"139","endLine":53,"endColumn":27,"fix":"267"},{"ruleId":"136","severity":2,"message":"268","line":60,"column":3,"nodeType":"138","messageId":"139","endLine":60,"endColumn":24},{"ruleId":"136","severity":2,"message":"269","line":62,"column":3,"nodeType":"138","messageId":"139","endLine":62,"endColumn":23},{"ruleId":"136","severity":2,"message":"270","line":63,"column":3,"nodeType":"138","messageId":"139","endLine":63,"endColumn":24,"fix":"271"},{"ruleId":"136","severity":2,"message":"181","line":64,"column":3,"nodeType":"138","messageId":"139","endLine":64,"endColumn":24,"fix":"272"},{"ruleId":"136","severity":2,"message":"273","line":78,"column":3,"nodeType":"138","messageId":"139","endLine":78,"endColumn":45,"fix":"274"},"sort-keys-fix/sort-keys-fix","Expected object keys to be in ascending order. 'prefer-template' should be before 'require-await'.","Property",{"range":"275","text":"276"},"typescript-sort-keys/interface","Expected interface keys to be in ascending order. 'autoConnect' should be before 'onPoll'.","TSPropertySignature","invalidOrder",{"range":"277","text":"278"},"Expected object keys to be in ascending order. 'autoConnect' should be before 'onPoll'.",{"range":"279","text":"280"},"Expected object keys to be in ascending order. 'setOnPoll' should be before 'stop'.",{"range":"281","text":"282"},"Expected object keys to be in ascending order. 'setAutoConnect' should be before 'setOnPoll'.",{"range":"283","text":"284"},"Expected object keys to be in ascending order. 'getGamepads' should be before 'setAutoConnect'.",{"range":"285","text":"286"},"Expected object keys to be in ascending order. 'getUnusedPadId' should be before 'getUnusedPadIds'.",{"range":"287","text":"288"},"Expected object keys to be in ascending order. 'addModule' should be before 'getUnusedPadId'.",{"range":"289","text":"290"},"Expected object keys to be in ascending order. 'clearModules' should be before 'removeModule'.",{"range":"291","text":"292"},"Expected interface keys to be in ascending order. 'clampThreshold' should be before 'threshold'.","Expected interface keys to be in ascending order. 'lastRumbleUpdate' should be before 'prevRumble'.",{"range":"293","text":"294"},"Expected interface keys to be in ascending order. 'buttons' should be before 'lastUpdate'.",{"range":"295","text":"296"},"Expected object keys to be in ascending order. 'clampThreshold' should be before 'threshold'.",{"range":"297","text":"298"},"Expected object keys to be in ascending order. 'strongMagnitude' should be before 'weakMagnitude'.",{"range":"299","text":"300"},"Expected object keys to be in ascending order. 'lastRumbleUpdate' should be before 'prevRumble'.",{"range":"301","text":"302"},"Expected object keys to be in ascending order. 'buttons' should be before 'lastUpdate'.",{"range":"303","text":"304"},"Expected object keys to be in ascending order. 'disconnect' should be before 'isConnected'.",{"range":"305","text":"306"},"Expected object keys to be in ascending order. 'connect' should be before 'disconnect'.",{"range":"307","text":"308"},"Expected object keys to be in ascending order. 'invertSticks' should be before 'setStick'.",{"range":"309","text":"310"},"Expected object keys to be in ascending order. 'cancelListen' should be before 'update'.",{"range":"311","text":"312"},"sort-destructure-keys/sort-destructure-keys","Expected object keys to be in sorted order. Expected consecutive to be before waitFor.","sort",{"range":"313","text":"314"},"Expected interface keys to be in ascending order. 'consecutive' should be before 'waitFor'.","Expected interface keys to be in ascending order. 'allowOffset' should be before 'consecutive'.",{"range":"315","text":"316"},"Expected object keys to be in ascending order. 'currentValue' should be before 'type'.",{"range":"317","text":"318"},"Expected object keys to be in ascending order. 'targetValue' should be before 'useTimeStamp'.",{"range":"319","text":"320"},"Expected object keys to be in ascending order. 'consecutive' should be before 'targetValue'.",{"range":"321","text":"322"},"Expected object keys to be in ascending order. 'allowOffset' should be before 'consecutive'.",{"range":"323","text":"324"},"Expected object keys to be in ascending order. 'listenAxis' should be before 'listenButton'.",{"range":"325","text":"326"},{"range":"327","text":"328"},{"range":"329","text":"316"},{"range":"330","text":"331"},{"range":"332","text":"320"},{"range":"333","text":"322"},{"range":"334","text":"324"},"Expected object keys to be in ascending order. 'buttonBindOnPress' should be before 'listenAxis'.",{"range":"335","text":"336"},"Expected object keys to be in ascending order. 'isRumbleSupported' should be before 'stickBindOnPress'.",{"range":"337","text":"338"},"unicorn/prefer-ternary","This `if` statement can be replaced by a ternary expression.","IfStatement","prefer-ternary",{"range":"339","text":"340"},"Expected object keys to be in ascending order. 'addRumble' should be before 'stopRumble'.",{"range":"341","text":"342"},"Expected object keys to be in sorted order. Expected currentValue to be before type.",{"range":"343","text":"344"},"Expected object keys to be in ascending order. 'dpadDown' should be before 'dpadUp'.",{"range":"345","text":"346"},"Expected object keys to be in ascending order. 'L1' should be before 'dpadRight'.",{"range":"347","text":"348"},"Expected object keys to be in ascending order. 'A' should be before 'R3'.",{"range":"349","text":"350"},"Expected object keys to be in ascending order. 'select' should be before 'start'.",{"range":"351","text":"352"},"Expected object keys to be in ascending order. 'home' should be before 'select'.",{"range":"353","text":"354"},{"range":"355","text":"300"},{"range":"356","text":"357"},"Expected object keys to be in ascending order. 'duration' should be before 'weakMagnitude'.",{"range":"358","text":"359"},"unicorn/better-regex","/^[a-z0-9]+$/i can be optimized to /^[\\da-z]+$/i.","Literal","better-regex",{"range":"360","text":"361"},"Expected object keys to be in ascending order. 'pressed' should be before 'value'.",{"range":"362","text":"363"},"Expected object keys to be in ascending order. 'justChanged' should be before 'pressed'.",{"range":"364","text":"365"},{"range":"366","text":"367"},{"range":"368","text":"365"},"Expected object keys to be in ascending order. 'inverts' should be before 'justChanged'.",{"range":"369","text":"370"},{"range":"371","text":"372"},{"range":"373","text":"374"},{"range":"375","text":"376"},{"range":"377","text":"378"},{"range":"379","text":"374"},"Expected object keys to be in sorted order. Expected module to be before state.",{"range":"380","text":"381"},"Expected object keys to be in ascending order. 'getAllButtons' should be before 'getButtons'.",{"range":"382","text":"383"},"Expected object keys to be in ascending order. 'getAllSticks' should be before 'getSticks'.",{"range":"384","text":"385"},"Expected object keys to be in ascending order. 'getAllMappers' should be before 'getMappers'.",{"range":"386","text":"387"},"Expected object keys to be in ascending order. 'removeMapper' should be before 'setMapper'.",{"range":"388","text":"389"},"Expected object keys to be in ascending order. 'clearMappers' should be before 'removeMapper'.",{"range":"390","text":"391"},"Expected interface keys to be in ascending order. 'pressed' should be before 'value'.",{"range":"392","text":"393"},"Expected interface keys to be in ascending order. 'justChanged' should be before 'pressed'.",{"range":"394","text":"395"},{"range":"396","text":"397"},"Expected interface keys to be in ascending order. 'inverts' should be before 'justChanged'.",{"range":"398","text":"399"},{"range":"400","text":"401"},{"range":"402","text":"403"},"Expected interface keys to be in ascending order. 'strongMagnitude' should be before 'weakMagnitude'.",{"range":"404","text":"405"},{"range":"406","text":"407"},"Expected interface keys to be in ascending order. 'currentValue' should be before 'type'.","Expected interface keys to be in ascending order. 'targetValue' should be before 'useTimeStamp'.","Expected interface keys to be in ascending order. 'consecutive' should be before 'targetValue'.",{"range":"408","text":"409"},{"range":"410","text":"411"},"Expected interface keys to be in ascending order. 'callback' should be before 'name'.",{"range":"412","text":"413"},[155,201],"'prefer-template': 2,\n      'require-await': 2",[243,286],"autoConnect: boolean;\n  onPoll: () => void;",[691,773],"autoConnect: params.autoConnect !== false,\n    onPoll: params.onPoll || (() => {})",[1495,1748],"setOnPoll: (onPoll: () => void) => {\n      state.onPoll = onPoll;\n    },\n\n    stop: () => {\n      if (animationFrameRequestId !== null) {\n        window.cancelAnimationFrame(animationFrameRequestId);\n        animationFrameRequestId = null;\n      }\n    }",[1677,1843],"setAutoConnect: (autoConnect: boolean) => {\n      state.autoConnect = autoConnect;\n    },\n\n    setOnPoll: (onPoll: () => void) => {\n      state.onPoll = onPoll;\n    }",[1755,1883],"getGamepads: () => state.gamepads,\n\n    setAutoConnect: (autoConnect: boolean) => {\n      state.autoConnect = autoConnect;\n    }",[1928,2324],"getUnusedPadId: () => {\n      const usedIds = new Set(state.modules.map((module) => module.getPadId()));\n      return state.gamepads.find(({ id }) => !usedIds.has(id))?.id;\n    },\n\n    getUnusedPadIds: () => {\n      const modules = new Set(state.modules.map((module) => module.getPadId()));\n      return state.gamepads\n        .map(({ id }) => id)\n        .filter((id) => !modules.has(id));\n    }",[2146,2579],"addModule: (module: AnyModule) => {\n      state.modules.push(module);\n\n      if (state.autoConnect && !module.getPadId()) {\n        const padId = joymap.getUnusedPadId();\n        if (padId) {\n          module.connect(padId);\n        }\n      }\n    },\n\n    getUnusedPadId: () => {\n      const usedIds = new Set(state.modules.map((module) => module.getPadId()));\n      return state.gamepads.find(({ id }) => !usedIds.has(id))?.id;\n    }",[2586,2823],"clearModules: () => {\n      state.modules.forEach((module) => joymap.removeModule(module));\n    },\n\n    removeModule: (module: AnyModule) => {\n      state.modules = state.modules.filter((m) => m !== module);\n      module.destroy();\n    }",[548,649],"lastRumbleUpdate: number;\n  prevPad: CustomGamepad;\n  prevRumble: StrictEffect;\n  pad: CustomGamepad;",[500,707],"buttons: Record<string, Button>;\n  clampThreshold: boolean;\n  pad: CustomGamepad;\n  prevPad: CustomGamepad;\n  prevRumble: StrictEffect;\n  lastRumbleUpdate: number;\n  lastUpdate: number;\n\n  threshold: number;",[1197,1284],"clampThreshold: params.clampThreshold !== false,\n    threshold: params.threshold || 0.2",[1377,1419],"strongMagnitude: 0,\n      weakMagnitude: 0",[1338,1460],"lastRumbleUpdate: Date.now(),\n    prevRumble: {\n      duration: 0,\n      weakMagnitude: 0,\n      strongMagnitude: 0,\n    }",[1466,1523],"buttons: getDefaultButtons(),\n\n    lastUpdate: Date.now()",[1618,1703],"disconnect: () => {\n      connected = false;\n    },\n\n    isConnected: () => connected",[1653,1824],"connect: (padId?: string) => {\n      connected = true;\n      if (padId) {\n        gamepadId = padId;\n      }\n    },\n\n    disconnect: () => {\n      connected = false;\n    }",[2470,3470],"invertSticks: (inverts: boolean[], ...inputNames: string[]) => {\n      inputNames.forEach((inputName) => {\n        const stick = state.sticks[inputName];\n        if (stick.inverts.length === inverts.length) {\n          stick.inverts = inverts;\n        } else {\n          throw new Error(\n            `On invertSticks(inverts, [..., ${inputName}, ...]): given argument inverts' length does not match '${inputName}' axis' length`,\n          );\n        }\n      });\n    },\n\n    setStick: (inputName: string, indexes: number[][], inverts?: boolean[]) => {\n      if (!nameIsValid(inputName)) {\n        throw new Error(\n          `On setStick('${inputName}'): inputName contains invalid characters`,\n        );\n      }\n\n      if (indexes.length === 0) {\n        throw new Error(\n          `On setStick('${inputName}', indexes): argument indexes is an empty array`,\n        );\n      }\n\n      state.sticks[inputName] = {\n        indexes,\n        inverts: inverts || indexes[0].map(() => false),\n      };\n    }",[4026,5120],"cancelListen: () => {\n      listenOptions = null;\n    },\n\n    update: (gamepad: RawGamepad) => {\n      state.prevPad = state.pad;\n      state.pad = {\n        axes: gamepad.axes as number[],\n        buttons: gamepad.buttons.map((a) => a.value),\n        rawPad: gamepad,\n      };\n\n      if (listenOptions) {\n        listenOptions = updateListenOptions(\n          listenOptions,\n          state.pad,\n          state.threshold,\n        );\n      }\n\n      // Update rumble state\n\n      if (module.isRumbleSupported()) {\n        const now = Date.now();\n        const currentRumble = getCurrentEffect(gamepad.id);\n        updateChannels(gamepad.id, now - state.lastUpdate);\n\n        if (\n          state.prevRumble.weakMagnitude !== currentRumble.weakMagnitude ||\n          state.prevRumble.strongMagnitude !== currentRumble.strongMagnitude ||\n          now - state.lastRumbleUpdate >= MAX_DURATION / 2\n        ) {\n          applyRumble(gamepad, currentRumble);\n          state.prevRumble = currentRumble;\n          state.lastRumbleUpdate = now;\n        }\n\n        state.lastUpdate = now;\n      }\n    }",[5224,5303],"allowOffset = true,\n        consecutive = false,\n        waitFor = [1, 'polls']",[5324,5421],"allowOffset?: boolean;\n        consecutive?: boolean;\n        waitFor?: [number, 'polls' | 'ms'];",[5569,5609],"currentValue: 0,\n        type: 'buttons'",[5619,5685],"targetValue: waitFor[0],\n        useTimeStamp: waitFor[1] === 'ms'",[5662,5706],"consecutive,\n        targetValue: waitFor[0]",[5695,5727],"allowOffset,\n        consecutive",[5127,6361],"listenAxis: (\n      callback: (indexes: number[][]) => void,\n      quantity = 2,\n      {\n        waitFor = [100, 'ms'],\n        consecutive = true,\n        allowOffset = true,\n      }: {\n        waitFor?: [number, 'polls' | 'ms'];\n        consecutive?: boolean;\n        allowOffset?: boolean;\n      } = {},\n    ) => {\n      listenOptions = {\n        callback: callback as (indexes: number[] | number[][]) => void,\n        quantity,\n        type: 'axes',\n        currentValue: 0,\n        useTimeStamp: waitFor[1] === 'ms',\n        targetValue: waitFor[0],\n        consecutive,\n        allowOffset,\n      };\n    },\n\n    listenButton: (\n      callback: (indexes: number[]) => void,\n      quantity = 1,\n      {\n        waitFor = [1, 'polls'],\n        consecutive = false,\n        allowOffset = true,\n      }: {\n        waitFor?: [number, 'polls' | 'ms'];\n        consecutive?: boolean;\n        allowOffset?: boolean;\n      } = {},\n    ) => {\n      listenOptions = {\n        callback: callback as (indexes: number[] | number[][]) => void,\n        quantity,\n        type: 'buttons',\n        currentValue: 0,\n        useTimeStamp: waitFor[1] === 'ms',\n        targetValue: waitFor[0],\n        consecutive,\n        allowOffset,\n      };\n    }",[5847,5924],"allowOffset = true,\n        consecutive = true,\n        waitFor = [100, 'ms']",[5945,6042],[6190,6227],"currentValue: 0,\n        type: 'axes'",[6237,6303],[6280,6324],[6313,6345],[5750,7132],"buttonBindOnPress: (\n      inputName: string,\n      callback: (buttonName?: string) => void,\n      allowDuplication = false,\n    ) => {\n      if (!nameIsValid(inputName)) {\n        throw new Error(\n          `On buttonBindOnPress('${inputName}'): inputName contains invalid characters`,\n        );\n      }\n\n      module.listenButton((indexes: number[]) => {\n        const resultName = findKey(\n          (value) => value[0] === indexes[0],\n          state.buttons,\n        );\n\n        if (!allowDuplication && resultName && state.buttons[inputName]) {\n          module.swapButtons(inputName, resultName);\n        } else {\n          module.setButton(inputName, indexes);\n        }\n\n        if (resultName) {\n          callback(resultName);\n        }\n      });\n    },\n\n    listenAxis: (\n      callback: (indexes: number[][]) => void,\n      quantity = 2,\n      {\n        waitFor = [100, 'ms'],\n        consecutive = true,\n        allowOffset = true,\n      }: {\n        waitFor?: [number, 'polls' | 'ms'];\n        consecutive?: boolean;\n        allowOffset?: boolean;\n      } = {},\n    ) => {\n      listenOptions = {\n        callback: callback as (indexes: number[] | number[][]) => void,\n        quantity,\n        type: 'axes',\n        currentValue: 0,\n        useTimeStamp: waitFor[1] === 'ms',\n        targetValue: waitFor[0],\n        consecutive,\n        allowOffset,\n      };\n    }",[7139,8654],"isRumbleSupported: (rawPad?: RawGamepad) => {\n      const padToTest = rawPad || state.pad.rawPad;\n      if (padToTest) {\n        return (\n          !!padToTest.vibrationActuator &&\n          !!padToTest.vibrationActuator.playEffect\n        );\n      } else {\n        return null;\n      }\n    },\n\n    stickBindOnPress: (\n      inputName: string,\n      callback: (stickName?: string) => void,\n      allowDuplication = false,\n    ) => {\n      if (!nameIsValid(inputName)) {\n        throw new Error(\n          `On stickBindOnPress('${inputName}'): inputName contains invalid characters`,\n        );\n      }\n\n      module.listenAxis((indexesResult: number[][]) => {\n        const resultName = findKey(({ indexes }) => {\n          if (indexes.length !== indexesResult.length) {\n            return false;\n          }\n\n          for (let i = 0; i < indexes.length; i++) {\n            if (indexes[i].length !== indexesResult[i].length) {\n              return false;\n            }\n\n            for (let axis = 0; axis < indexes[i].length; axis++) {\n              if (indexes[i][axis] !== indexesResult[i][axis]) {\n                return false;\n              }\n            }\n          }\n          return true;\n        }, state.sticks);\n\n        if (!allowDuplication && resultName && state.sticks[inputName]) {\n          module.swapSticks(inputName, resultName);\n        } else {\n          module.setStick(inputName, indexesResult);\n        }\n\n        if (resultName) {\n          callback(resultName);\n        }\n      });\n    }",[8466,8648],"return padToTest ? (\n          !!padToTest.vibrationActuator &&\n          !!padToTest.vibrationActuator.playEffect\n        ) : null;",[8661,8975],"addRumble: (effect: Effect | Effect[], channelName?: string) => {\n      if (state.pad.rawPad) {\n        addRumble(state.pad.rawPad.id, effect, channelName);\n      }\n    },\n\n    stopRumble: (channelName?: string) => {\n      if (state.pad.rawPad) {\n        stopRumble(state.pad.rawPad.id, channelName);\n      }\n    }",[389,508],"allowOffset,\n    callback,\n    consecutive,\n    currentValue,\n    quantity,\n    targetValue,\n    type,\n    useTimeStamp",[1545,1577],"dpadDown: [13],\n    dpadUp: [12]",[1603,1631],"L1: [4],\n    dpadRight: [15]",[1690,1710],"A: [0],\n    R3: [11]",[1752,1779],"select: [8],\n    start: [9]",[1768,1795],"home: [16],\n    select: [8]",[462,504],[577,719],"strongMagnitude: Math.min(1, Math.max(0, effect.strongMagnitude || 0)),\n    weakMagnitude: Math.min(1, Math.max(0, effect.weakMagnitude || 0))",[2254,2336],"duration: MAX_DURATION,\n    weakMagnitude: Math.min(1, Math.max(0, weakMagnitude))",[1459,1473],"/^[\\da-z]+$/i",[2511,2569],"pressed,\n    value: !clampThreshold || pressed ? value : 0",[2562,2611],"justChanged: pressed !== prevPressed,\n    pressed",[3565,3700],"pressed,\n    value: value.map(\n      !clampThreshold || pressed\n        ? (v, i) => (!inverts[i] ? v : v * -1)\n        : () => 0,\n    )",[3693,3742],[3706,3755],"inverts,\n    justChanged: pressed !== prevPressed",[502,533],"pressed: false,\n  value: [0, 0]",[519,555],"justChanged: false,\n  pressed: false",[537,582],"inverts: [false, false],\n  justChanged: false",[651,677],"pressed: false,\n  value: 0",[663,699],[772,797],"module: baseModule, state",[1310,2332],"getAllButtons: (): Record<string, ButtonResult> => {\n      if (!module.isConnected()) {\n        return mapValues(() => emptyButton, state.buttons);\n      }\n\n      return mapValues(\n        (button) =>\n          buttonMapMemoized(\n            state.pad,\n            state.prevPad,\n            button,\n            state.threshold,\n            state.clampThreshold,\n          ),\n        state.buttons,\n      );\n    },\n\n    getButtons: (...inputNames: string[]) => {\n      if (!module.isConnected()) {\n        const result: Record<string, ButtonResult> = {};\n        inputNames.forEach((mapperName) => {\n          result[mapperName] = emptyButton;\n        });\n\n        return result;\n      }\n\n      const result: Record<string, ButtonResult> = {};\n      inputNames.forEach((inputName) => {\n        result[inputName] = buttonMapMemoized(\n          state.pad,\n          state.prevPad,\n          state.buttons[inputName],\n          state.threshold,\n          state.clampThreshold,\n        );\n      });\n\n      return result;\n    }",[2688,3805],"getAllSticks: (): Record<string, StickResult> => {\n      if (!module.isConnected()) {\n        return mapValues(() => emptyStick, state.sticks);\n      }\n\n      return mapValues((stick) => {\n        const { indexes, inverts } = stick;\n        return stickMapMemoized(\n          state.pad,\n          state.prevPad,\n          indexes,\n          inverts,\n          state.threshold,\n          state.clampThreshold,\n        );\n      }, state.sticks);\n    },\n\n    getSticks: (...inputNames: string[]) => {\n      if (!module.isConnected()) {\n        const result: Record<string, StickResult> = {};\n        inputNames.forEach((mapperName) => {\n          result[mapperName] = emptyStick;\n        });\n\n        return result;\n      }\n\n      const result: Record<string, StickResult> = {};\n      inputNames.forEach((inputName) => {\n        const { indexes, inverts } = state.sticks[inputName];\n        result[inputName] = stickMapMemoized(\n          state.pad,\n          state.prevPad,\n          indexes,\n          inverts,\n          state.threshold,\n          state.clampThreshold,\n        );\n      });\n\n      return result;\n    }",[4009,4698],"getAllMappers: (): Record<string, MapperResult> => {\n      if (!module.isConnected()) {\n        return mapValues(() => emptyMapper, mappers);\n      }\n\n      return mapValues((mapper) => mapper(module), mappers);\n    },\n\n    getMappers: (...mapperNames: string[]) => {\n      if (!module.isConnected()) {\n        const result: Record<string, MapperResult> = {};\n        mapperNames.forEach((mapperName) => {\n          result[mapperName] = emptyMapper;\n        });\n\n        return result;\n      }\n\n      const result: Record<string, MapperResult> = {};\n      mapperNames.forEach((mapperName) => {\n        result[mapperName] = mappers[mapperName](module);\n      });\n\n      return result;\n    }",[4705,4885],"removeMapper: (mapperName: string) => {\n      delete mappers[mapperName];\n    },\n\n    setMapper: (mapperName: string, mapper: Mapper) => {\n      mappers[mapperName] = mapper;\n    }",[4806,4939],"clearMappers: () => {\n      mappers = {};\n    },\n\n    removeMapper: (mapperName: string) => {\n      delete mappers[mapperName];\n    }",[150,184],"pressed: boolean;\n  value: number;",[132,208],"justChanged: boolean;\n  value: number;\n  pressed: boolean;\n  type: 'button';",[262,322],"justChanged: boolean;\n  pressed: boolean;\n  value: number[];",[245,344],"inverts: boolean[];\n  value: number[];\n  pressed: boolean;\n  justChanged: boolean;\n  type: 'stick';",[570,615],"autoConnect?: boolean;\n  onPoll?: () => void;",[651,716],"clampThreshold?: boolean;\n  threshold?: number;\n  padId?: string;",[788,843],"strongMagnitude?: number;\n      weakMagnitude?: number;",[992,1041],"strongMagnitude: number;\n  weakMagnitude: number;",[1154,1275],"consecutive: boolean;\n  currentValue: number;\n  useTimeStamp: boolean;\n  targetValue: number;\n  type: 'buttons' | 'axes';",[1080,1299],"allowOffset: boolean;\n  quantity: number;\n  type: 'buttons' | 'axes';\n  currentValue: number;\n  useTimeStamp: boolean;\n  targetValue: number;\n  consecutive: boolean;\n  callback: (indexes: number[] | number[][]) => void;",[1551,1609],"callback: (button: InputResult[]) => void;\n  name: string;"]