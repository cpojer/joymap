{"version":3,"sources":["../../src/JoyMap.ts"],"names":["createJoymap","params","animationFrameRequestId","isSupported","navigator","getGamepads","state","onPoll","autoConnect","gamepads","modules","joymap","start","poll","module","isConnected","padId","getUnusedPadId","connect","step","window","requestAnimationFrame","stop","cancelAnimationFrame","setOnPoll","setAutoConnect","getModules","getUnusedPadIds","getPadId","usedIds","gamepadIds","id","addModule","push","removeModule","m","destroy","clearModules","gamepadIsValid","pad","update","gamepad","disconnect"],"mappings":"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","sourcesContent":["import {\r\n  noop,\r\n  map,\r\n  isFunction,\r\n  find,\r\n  filter,\r\n  difference,\r\n  forEach,\r\n  includes,\r\n  compact,\r\n} from 'lodash/fp';\r\n\r\nimport { getRawGamepads, gamepadIsValid } from './common/utils';\r\nimport { RawGamepad, JoymapParams } from './types';\r\nimport { BaseModule } from './baseModule/base';\r\nimport { QueryModule } from './queryModule/query';\r\nimport { StreamModule } from './streamModule/stream';\r\nimport { EventModule } from './eventModule/event';\r\n\r\ninterface JoymapState {\r\n  onPoll: () => void;\r\n  autoConnect: boolean;\r\n  gamepads: RawGamepad[];\r\n  modules: AnyModule[];\r\n}\r\n\r\nexport type AnyModule = BaseModule['module'] | QueryModule | StreamModule | EventModule;\r\n\r\nexport type Joymap = ReturnType<typeof createJoymap>;\r\n\r\nexport default function createJoymap(params: JoymapParams = {}) {\r\n  let animationFrameRequestId: number | null = null;\r\n  const isSupported = navigator && isFunction(navigator.getGamepads);\r\n\r\n  const state: JoymapState = {\r\n    onPoll: params.onPoll || noop,\r\n    autoConnect: params.autoConnect !== false,\r\n    gamepads: [],\r\n    modules: [],\r\n  };\r\n\r\n  const joymap = {\r\n    isSupported: () => isSupported,\r\n\r\n    start: () => {\r\n      if (isSupported && animationFrameRequestId === null) {\r\n        joymap.poll();\r\n        if (state.autoConnect) {\r\n          forEach((module) => {\r\n            if (!module.isConnected()) {\r\n              const padId = joymap.getUnusedPadId();\r\n              if (padId) {\r\n                module.connect(padId);\r\n              }\r\n            }\r\n          }, state.modules);\r\n        }\r\n        const step = () => {\r\n          joymap.poll();\r\n          animationFrameRequestId = window.requestAnimationFrame(step);\r\n        };\r\n        animationFrameRequestId = window.requestAnimationFrame(step);\r\n      }\r\n    },\r\n\r\n    stop: () => {\r\n      if (animationFrameRequestId !== null) {\r\n        window.cancelAnimationFrame(animationFrameRequestId);\r\n        animationFrameRequestId = null;\r\n      }\r\n    },\r\n\r\n    setOnPoll: (onPoll: () => void) => {\r\n      state.onPoll = onPoll;\r\n    },\r\n\r\n    setAutoConnect: (autoConnect: boolean) => {\r\n      state.autoConnect = autoConnect;\r\n    },\r\n\r\n    getGamepads: () => state.gamepads,\r\n\r\n    getModules: () => state.modules,\r\n\r\n    getUnusedPadIds: () =>\r\n      compact(\r\n        difference(\r\n          map('id', state.gamepads),\r\n          map((module) => module.getPadId(), state.modules),\r\n        ),\r\n      ),\r\n\r\n    getUnusedPadId: () => {\r\n      const usedIds = map((module) => module.getPadId(), state.modules);\r\n      const gamepadIds = map('id', state.gamepads);\r\n\r\n      return find((id) => !includes(id, usedIds), gamepadIds);\r\n    },\r\n\r\n    addModule: (module: AnyModule) => {\r\n      state.modules.push(module);\r\n\r\n      if (state.autoConnect && !module.getPadId()) {\r\n        const padId = joymap.getUnusedPadId();\r\n        if (padId) {\r\n          module.connect(padId);\r\n        }\r\n      }\r\n    },\r\n\r\n    removeModule: (module: AnyModule) => {\r\n      state.modules = filter((m) => m !== module, state.modules);\r\n      module.destroy();\r\n    },\r\n\r\n    clearModules: () => {\r\n      forEach((module) => joymap.removeModule(module), state.modules);\r\n    },\r\n\r\n    poll: () => {\r\n      state.gamepads = filter(gamepadIsValid, getRawGamepads()) as RawGamepad[];\r\n\r\n      forEach((module) => {\r\n        if (state.autoConnect && !module.getPadId()) {\r\n          const padId = joymap.getUnusedPadId();\r\n          if (padId) {\r\n            module.connect(padId);\r\n            const pad = find({ id: module.getPadId() }, state.gamepads) as RawGamepad | undefined;\r\n            if (pad) {\r\n              module.update(pad);\r\n            }\r\n          }\r\n        } else {\r\n          const gamepad = find({ id: module.getPadId() }, state.gamepads) as RawGamepad | undefined;\r\n\r\n          if (gamepad) {\r\n            if (!module.isConnected()) {\r\n              module.connect();\r\n            }\r\n            module.update(gamepad);\r\n          } else if (module.isConnected()) {\r\n            module.disconnect();\r\n          }\r\n        }\r\n      }, state.modules);\r\n\r\n      state.onPoll();\r\n    },\r\n  };\r\n\r\n  return joymap;\r\n}\r\n"],"file":"JoyMap.js"}