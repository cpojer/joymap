{"version":3,"sources":["../../../src/eventModule/eventUtils.ts"],"names":["getEventTokens","name","value","shuntingYard","operators","includes","inputName","inputState","eventIsValid","inputs","eventTokens","Array","isArray","result","token","verifyTokens","arr","stack","forEach","push","elem1","pop","elem2","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;;;;;;;AAMO,SAASA,cAAT,CAAwBC,IAAxB,EAAsC;AAC3C,SAAO,oBACL,qBAAM,sBAAN,CADK,EAEL,sBAAO,UAACC,KAAD;AAAA,WAAW,CAAC,CAACA,KAAF,IAAWA,KAAK,KAAK,GAAhC;AAAA,GAAP,CAFK,EAGLC,qBAHK,EAIL,mBAAI,UAACD,KAAD,EAAW;AACb,QAAIE,wBAAUC,QAAV,CAAmBH,KAAnB,CAAJ,EAA+B;AAC7B,aAAOA,KAAP;AACD;;AAED,WAAO;AACLI,MAAAA,SAAS,EAAE,qBAAM,GAAN,EAAWJ,KAAX,EAAkB,CAAlB,CADN;AAELK,MAAAA,UAAU,EAAE,qBAAM,GAAN,EAAWL,KAAX,EAAkB,CAAlB,KAAwB;AAF/B,KAAP;AAID,GATD,CAJK,EAcLD,IAdK,CAAP;AAeD;;AAEM,SAASO,YAAT,CAAsBC,MAAtB,EAA4C;AACjD,MAAMC,WAAW,GAAGC,KAAK,CAACC,OAAN,CAAcH,MAAd,IAAwBA,MAAxB,GAAiCT,cAAc,CAACS,MAAD,CAAnE;AAEA,SAAO,sBACL,UAACI,MAAD,EAASC,KAAT,EAAmB;AACjB,QAAI,CAACD,MAAL,EAAa;AACX,aAAOA,MAAP;AACD;;AAED,QAAI,wBAASC,KAAT,CAAJ,EAAqB;AACnB,aAAOV,wBAAUC,QAAV,CAAmBS,KAAnB,CAAP;AACD;;AAED,WAAO,wBAAYA,KAAK,CAACR,SAAlB,CAAP;AACD,GAXI,EAYL,IAZK,EAaLI,WAbK,CAAP;AAeD;;AAEM,SAASK,YAAT,CAAsBC,GAAtB,EAAiD;AACtD,MAAMC,KAAgB,GAAG,EAAzB;AAEAD,EAAAA,GAAG,CAACE,OAAJ,CAAY,UAACJ,KAAD,EAAW;AACrB,QAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AAC9BG,MAAAA,KAAK,CAACE,IAAN,CAAWL,KAAX;AACD,KAFD,MAEO;AACL,UAAMM,KAAK,GAAGH,KAAK,CAACI,GAAN,EAAd;AACA,UAAMC,KAAK,GAAGL,KAAK,CAACI,GAAN,EAAd;;AAEA,UAAIP,KAAK,KAAK,IAAd,EAAoB;AAClBG,QAAAA,KAAK,CAACE,IAAN,CAAW,CAAC,EAAEC,KAAK,IAAIE,KAAX,CAAZ;AACD,OAFD,MAEO,IAAIR,KAAK,KAAK,IAAd,EAAoB;AACzBG,QAAAA,KAAK,CAACE,IAAN,CAAW,CAAC,EAAEC,KAAK,IAAIE,KAAX,CAAZ;AACD,OAFM,MAEA;AACL,cAAM,IAAIC,KAAJ,0CAA4CT,KAA5C,eAAN;AACD;AACF;AACF,GAfD;AAiBA,SAAOG,KAAK,CAAC,CAAD,CAAZ;AACD","sourcesContent":["import { split, reduce, filter, flow, map, isString } from 'lodash/fp';\r\n\r\nimport { nameIsValid } from '../common/utils';\r\nimport shuntingYard, { operators } from './shuntingYard';\r\nimport { EventToken } from '../types';\r\n\r\n/**\r\n * Returns EventToken[] in reverse polish notation (RPN)\r\n */\r\nexport function getEventTokens(name: string) {\r\n  return flow(\r\n    split(/([^a-zA-Z0-9.&&||])/g),\r\n    filter((value) => !!value && value !== ' '),\r\n    shuntingYard,\r\n    map((value) => {\r\n      if (operators.includes(value)) {\r\n        return value;\r\n      }\r\n\r\n      return {\r\n        inputName: split('.', value)[0],\r\n        inputState: split('.', value)[1] || 'pressed',\r\n      };\r\n    }),\r\n  )(name) as EventToken[];\r\n}\r\n\r\nexport function eventIsValid(inputs: EventToken[]) {\r\n  const eventTokens = Array.isArray(inputs) ? inputs : getEventTokens(inputs);\r\n\r\n  return reduce(\r\n    (result, token) => {\r\n      if (!result) {\r\n        return result;\r\n      }\r\n\r\n      if (isString(token)) {\r\n        return operators.includes(token);\r\n      }\r\n\r\n      return nameIsValid(token.inputName);\r\n    },\r\n    true,\r\n    eventTokens,\r\n  );\r\n}\r\n\r\nexport function verifyTokens(arr: (string | boolean)[]) {\r\n  const stack: boolean[] = [];\r\n\r\n  arr.forEach((token) => {\r\n    if (typeof token === 'boolean') {\r\n      stack.push(token);\r\n    } else {\r\n      const elem1 = stack.pop();\r\n      const elem2 = stack.pop();\r\n\r\n      if (token === '&&') {\r\n        stack.push(!!(elem1 && elem2));\r\n      } else if (token === '||') {\r\n        stack.push(!!(elem1 || elem2));\r\n      } else {\r\n        throw new Error(`verifyTokens: invalid operator ${token} was used`);\r\n      }\r\n    }\r\n  });\r\n\r\n  return stack[0];\r\n}\r\n"],"file":"eventUtils.js"}