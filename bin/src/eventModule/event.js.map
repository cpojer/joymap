{"version":3,"sources":["../../../src/eventModule/event.ts"],"names":["createEventModule","params","state","baseModule","module","buttonMapMemoized","buttonMap","stickMapMemoized","stickMap","inputEvents","addEvent","eventName","callback","tokens","push","name","removeEvent","event","update","gamepad","buttons","result","pad","prevPad","threshold","clampThreshold","pressed","sticks","indexes","inverts","resultCopy","results","token","inputName","includes","inputState","justChanged","destroy"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;;;;;;;;;AAMe,SAASA,iBAAT,GAAwC;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AAAA,0BACf,mBAAiBA,MAAjB,CADe;AAAA,MAC7CC,KAD6C,qBAC7CA,KAD6C;AAAA,MAC9BC,UAD8B,qBACtCC,MADsC;;AAGrD,MAAMC,iBAAiB,GAAG,0BAAQC,gBAAR,CAA1B;AACA,MAAMC,gBAAgB,GAAG,0BAAQC,eAAR,CAAzB;AAEA,MAAIC,WAAyB,GAAG,EAAhC;AAEA,MAAML,MAAM,GAAG,wBAASD,UAAT,kCACVA,UADU;AAGbO,IAAAA,QAAQ,EAAE,kBAACC,SAAD,EAAoBC,QAApB,EAAyD;AACjE,UAAMC,MAAM,GAAG,gCAAeF,SAAf,CAAf;;AACA,UAAI,8BAAaE,MAAb,CAAJ,EAA0B;AACxBJ,QAAAA,WAAW,CAACK,IAAZ,CAAiB;AAAEC,UAAAA,IAAI,EAAEJ,SAAR;AAAmBC,UAAAA,QAAQ,EAARA,QAAnB;AAA6BC,UAAAA,MAAM,EAANA;AAA7B,SAAjB;AACD;AACF,KARY;AAUbG,IAAAA,WAAW,EAAE,qBAACL,SAAD,EAAoBC,QAApB,EAAyD;AACpEH,MAAAA,WAAW,GAAG,sBACZ,UAACQ,KAAD;AAAA,eAAWA,KAAK,CAACF,IAAN,KAAeJ,SAAf,IAA4BM,KAAK,CAACL,QAAN,KAAmBA,QAA1D;AAAA,OADY,EAEZH,WAFY,CAAd;AAID,KAfY;AAiBbS,IAAAA,MAAM,EAAE,gBAACC,OAAD,EAAyB;AAC/BhB,MAAAA,UAAU,CAACe,MAAX,CAAkBC,OAAlB;AAEA,6BAAQ,UAACF,KAAD,EAAW;AACjB,YAAIf,KAAK,CAACkB,OAAN,CAAcH,KAAK,CAACF,IAApB,CAAJ,EAA+B;AAE7B,cAAMM,MAAM,GAAGhB,iBAAiB,CAC9BH,KAAK,CAACoB,GADwB,EAE9BpB,KAAK,CAACqB,OAFwB,EAG9BrB,KAAK,CAACkB,OAAN,CAAcH,KAAK,CAACF,IAApB,CAH8B,EAI9Bb,KAAK,CAACsB,SAJwB,EAK9BtB,KAAK,CAACuB,cALwB,CAAhC;;AAQA,cAAIJ,MAAM,CAACK,OAAX,EAAoB;AAClBT,YAAAA,KAAK,CAACL,QAAN,CAAe,CAACS,MAAD,CAAf;AACD;AACF,SAbD,MAaO,IAAInB,KAAK,CAACyB,MAAN,CAAaV,KAAK,CAACF,IAAnB,CAAJ,EAA8B;AAAA,sCAENb,KAAK,CAACyB,MAAN,CAAaV,KAAK,CAACF,IAAnB,CAFM;AAAA,cAE3Ba,OAF2B,yBAE3BA,OAF2B;AAAA,cAElBC,OAFkB,yBAElBA,OAFkB;;AAGnC,cAAMR,OAAM,GAAGd,gBAAgB,CAC7BL,KAAK,CAACoB,GADuB,EAE7BpB,KAAK,CAACqB,OAFuB,EAG7BK,OAH6B,EAI7BC,OAJ6B,EAK7B3B,KAAK,CAACsB,SALuB,EAM7BtB,KAAK,CAACuB,cANuB,CAA/B;;AASA,cAAIJ,OAAM,CAACK,OAAX,EAAoB;AAClBT,YAAAA,KAAK,CAACL,QAAN,CAAe,CAACS,OAAD,CAAf;AACD;AACF,SAfM,MAeA;AAEL,cAAMS,UAAyB,GAAG,EAAlC;AACA,cAAMC,OAA6B,GAAG,mBAAI,UAACC,KAAD,EAAW;AACnD,gBAAI,wBAASA,KAAT,CAAJ,EAAqB;AACnB,qBAAOA,KAAP;AACD;;AAED,gBAAIX,MAAJ;;AACA,gBAAInB,KAAK,CAACkB,OAAN,CAAcY,KAAK,CAACC,SAApB,CAAJ,EAAoC;AAClCZ,cAAAA,MAAM,GAAGhB,iBAAiB,CACxBH,KAAK,CAACoB,GADkB,EAExBpB,KAAK,CAACqB,OAFkB,EAGxBrB,KAAK,CAACkB,OAAN,CAAcY,KAAK,CAACC,SAApB,CAHwB,EAIxB/B,KAAK,CAACsB,SAJkB,EAKxBtB,KAAK,CAACuB,cALkB,CAA1B;AAOD,aARD,MAQO,IAAIvB,KAAK,CAACyB,MAAN,CAAaK,KAAK,CAACC,SAAnB,CAAJ,EAAmC;AAAA,0CACX/B,KAAK,CAACyB,MAAN,CAAaK,KAAK,CAACC,SAAnB,CADW;AAAA,kBAChCL,QADgC,yBAChCA,OADgC;AAAA,kBACvBC,QADuB,yBACvBA,OADuB;AAExCR,cAAAA,MAAM,GAAGd,gBAAgB,CACvBL,KAAK,CAACoB,GADiB,EAEvBpB,KAAK,CAACqB,OAFiB,EAGvBK,QAHuB,EAIvBC,QAJuB,EAKvB3B,KAAK,CAACsB,SALiB,EAMvBtB,KAAK,CAACuB,cANiB,CAAzB;AAQD;;AAED,gBAAIJ,MAAJ,EAAY;AACV,kBAAI,CAACS,UAAU,CAACI,QAAX,CAAoBb,MAApB,CAAL,EAAkC;AAGhCS,gBAAAA,UAAU,CAAChB,IAAX,CAAgBO,MAAhB;AACD;;AAED,kBAAIW,KAAK,CAACG,UAAN,KAAqB,SAAzB,EAAoC;AAClC,uBAAOd,MAAM,CAACK,OAAd;AACD;;AAED,kBAAIM,KAAK,CAACG,UAAN,KAAqB,aAAzB,EAAwC;AACtC,uBAAOd,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACe,WAAhC;AACD;;AAED,kBAAIJ,KAAK,CAACG,UAAN,KAAqB,cAAzB,EAAyC;AACvC,uBAAO,CAACd,MAAM,CAACK,OAAR,IAAmBL,MAAM,CAACe,WAAjC;AACD;;AAED,qBAAO,CAACf,MAAM,CAACK,OAAf;AACD;;AAED,mBAAO,KAAP;AACD,WAjDqC,EAiDnCT,KAAK,CAACJ,MAjD6B,CAAtC;;AAmDA,cAAI,8BAAakB,OAAb,CAAJ,EAA2B;AACzBd,YAAAA,KAAK,CAACL,QAAN,CAAekB,UAAf;AACD;AACF;AACF,OAvFD,EAuFGrB,WAvFH;AAwFD,KA5GY;AA8Gb4B,IAAAA,OA9Ga,qBA8GH;AACRlC,MAAAA,UAAU,CAACkC,OAAX;AACA5B,MAAAA,WAAW,GAAG,EAAd;AACD;AAjHY,KAAf;AAoHA,SAAOL,MAAP;AACD","sourcesContent":["import memoize from 'fast-memoize';\r\nimport { filter, forEach, assignIn, map, isString } from 'lodash/fp';\r\n\r\nimport createBaseModule from '../baseModule/base';\r\nimport { buttonMap, stickMap } from '../common/utils';\r\nimport { eventIsValid, getEventTokens, verifyTokens } from './eventUtils';\r\n\r\nimport { RawGamepad, InputEvent, InputResult } from '../types';\r\n\r\nexport type EventModule = ReturnType<typeof createEventModule>;\r\n\r\nexport default function createEventModule(params = {}) {\r\n  const { state, module: baseModule } = createBaseModule(params);\r\n\r\n  const buttonMapMemoized = memoize(buttonMap);\r\n  const stickMapMemoized = memoize(stickMap);\r\n\r\n  let inputEvents: InputEvent[] = [];\r\n\r\n  const module = assignIn(baseModule, {\r\n    ...baseModule,\r\n\r\n    addEvent: (eventName: string, callback: InputEvent['callback']) => {\r\n      const tokens = getEventTokens(eventName);\r\n      if (eventIsValid(tokens)) {\r\n        inputEvents.push({ name: eventName, callback, tokens });\r\n      }\r\n    },\r\n\r\n    removeEvent: (eventName: string, callback: InputEvent['callback']) => {\r\n      inputEvents = filter(\r\n        (event) => event.name !== eventName || event.callback !== callback,\r\n        inputEvents,\r\n      );\r\n    },\r\n\r\n    update: (gamepad: RawGamepad) => {\r\n      baseModule.update(gamepad);\r\n\r\n      forEach((event) => {\r\n        if (state.buttons[event.name]) {\r\n          // simple button event\r\n          const result = buttonMapMemoized(\r\n            state.pad,\r\n            state.prevPad,\r\n            state.buttons[event.name],\r\n            state.threshold,\r\n            state.clampThreshold,\r\n          );\r\n\r\n          if (result.pressed) {\r\n            event.callback([result]);\r\n          }\r\n        } else if (state.sticks[event.name]) {\r\n          // simple stick event\r\n          const { indexes, inverts } = state.sticks[event.name];\r\n          const result = stickMapMemoized(\r\n            state.pad,\r\n            state.prevPad,\r\n            indexes,\r\n            inverts,\r\n            state.threshold,\r\n            state.clampThreshold,\r\n          );\r\n\r\n          if (result.pressed) {\r\n            event.callback([result]);\r\n          }\r\n        } else {\r\n          // composite event with operators\r\n          const resultCopy: InputResult[] = [];\r\n          const results: (string | boolean)[] = map((token) => {\r\n            if (isString(token)) {\r\n              return token;\r\n            }\r\n\r\n            let result;\r\n            if (state.buttons[token.inputName]) {\r\n              result = buttonMapMemoized(\r\n                state.pad,\r\n                state.prevPad,\r\n                state.buttons[token.inputName],\r\n                state.threshold,\r\n                state.clampThreshold,\r\n              );\r\n            } else if (state.sticks[token.inputName]) {\r\n              const { indexes, inverts } = state.sticks[token.inputName];\r\n              result = stickMapMemoized(\r\n                state.pad,\r\n                state.prevPad,\r\n                indexes,\r\n                inverts,\r\n                state.threshold,\r\n                state.clampThreshold,\r\n              );\r\n            }\r\n\r\n            if (result) {\r\n              if (!resultCopy.includes(result)) {\r\n                // we save the input result for the callback (avoiding repetition)\r\n                // TODO: maybe there's a cleaner way of doing this?\r\n                resultCopy.push(result);\r\n              }\r\n\r\n              if (token.inputState === 'pressed') {\r\n                return result.pressed;\r\n              }\r\n\r\n              if (token.inputState === 'justPressed') {\r\n                return result.pressed && result.justChanged;\r\n              }\r\n\r\n              if (token.inputState === 'justReleased') {\r\n                return !result.pressed && result.justChanged;\r\n              }\r\n\r\n              return !result.pressed;\r\n            }\r\n\r\n            return false;\r\n          }, event.tokens);\r\n\r\n          if (verifyTokens(results)) {\r\n            event.callback(resultCopy);\r\n          }\r\n        }\r\n      }, inputEvents);\r\n    },\r\n\r\n    destroy() {\r\n      baseModule.destroy();\r\n      inputEvents = [];\r\n    },\r\n  });\r\n\r\n  return module;\r\n}\r\n"],"file":"event.js"}