{"version":3,"sources":["../../../src/eventModule/shuntingYard.ts"],"names":["operatorPrecedence","operators","Object","keys","nonInputs","shuntingYard","tokens","stack","reduce","output","token","includes","push","pop","concat","reverse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAKO,IAAMA,kBAAkB,GAAG;AAAE,QAAM,CAAR;AAAW,QAAM;AAAjB,CAA3B;;AACA,IAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYH,kBAAZ,CAAlB;;AACA,IAAMI,SAAS,gCAAOH,SAAP,IAAkB,GAAlB,EAAuB,GAAvB,EAAf;;;AAKQ,SAASI,YAAT,CAAsBC,MAAtB,EAAkD;AAC/D,MAAMC,KAAe,GAAG,EAAxB;AAEA,SAAOD,MAAM,CACVE,MADI,CACG,UAACC,MAAD,EAASC,KAAT,EAAmB;AACzB,QAAI,CAACN,SAAS,CAACO,QAAV,CAAmBD,KAAnB,CAAL,EAAgC;AAC9BD,MAAAA,MAAM,CAACG,IAAP,CAAYF,KAAZ;AACD;;AAED,QAAIA,KAAK,IAAIV,kBAAb,EAAiC;AAC/B,aACE,oBAAKO,KAAL,KAAeP,kBAAf,IACAA,kBAAkB,CAACU,KAAD,CAAlB,IAA6BV,kBAAkB,CAAC,oBAAKO,KAAL,CAAD,CAFjD,EAGE;AACAE,QAAAA,MAAM,CAACG,IAAP,CAAYL,KAAK,CAACM,GAAN,EAAZ;AACD;;AACDN,MAAAA,KAAK,CAACK,IAAN,CAAWF,KAAX;AACD;;AAED,QAAIA,KAAK,KAAK,GAAd,EAAmB;AACjBH,MAAAA,KAAK,CAACK,IAAN,CAAWF,KAAX;AACD;;AAED,QAAIA,KAAK,KAAK,GAAd,EAAmB;AACjB,aAAO,oBAAKH,KAAL,MAAgB,GAAvB,EAA4B;AAC1BE,QAAAA,MAAM,CAACG,IAAP,CAAYL,KAAK,CAACM,GAAN,EAAZ;AACD;;AACDN,MAAAA,KAAK,CAACM,GAAN;AACD;;AAED,WAAOJ,MAAP;AACD,GA5BI,EA4BF,EA5BE,EA6BJK,MA7BI,CA6BGP,KAAK,CAACQ,OAAN,EA7BH,CAAP;AA8BD","sourcesContent":["// @ts-nocheck\r\n// TODO: apply types properly so that TS doesn't whine so much\r\n\r\nimport { last } from 'lodash/fp';\r\n\r\nexport const operatorPrecedence = { '||': 1, '&&': 2 };\r\nexport const operators = Object.keys(operatorPrecedence);\r\nexport const nonInputs = [...operators, '(', ')'];\r\n\r\n/**\r\n * Takes an array of infix tokens and transforms it to postfix (removing parens)\r\n */\r\nexport default function shuntingYard(tokens: string[]): string[] {\r\n  const stack: string[] = [];\r\n\r\n  return tokens\r\n    .reduce((output, token) => {\r\n      if (!nonInputs.includes(token)) {\r\n        output.push(token);\r\n      }\r\n\r\n      if (token in operatorPrecedence) {\r\n        while (\r\n          last(stack) in operatorPrecedence &&\r\n          operatorPrecedence[token] <= operatorPrecedence[last(stack)]\r\n        ) {\r\n          output.push(stack.pop());\r\n        }\r\n        stack.push(token);\r\n      }\r\n\r\n      if (token === '(') {\r\n        stack.push(token);\r\n      }\r\n\r\n      if (token === ')') {\r\n        while (last(stack) !== '(') {\r\n          output.push(stack.pop());\r\n        }\r\n        stack.pop();\r\n      }\r\n\r\n      return output;\r\n    }, [])\r\n    .concat(stack.reverse());\r\n}\r\n"],"file":"shuntingYard.js"}