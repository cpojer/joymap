{"version":3,"sources":["../../../src/baseModule/baseUtils.ts"],"names":["mockGamepad","axes","buttons","rawPad","undefined","updateListenOptions","listenOptions","pad","threshold","callback","quantity","type","currentValue","targetValue","useTimeStamp","consecutive","allowOffset","indexes","value","Math","abs","length","Date","now","comparison","getDefaultButtons","dpadUp","dpadDown","dpadLeft","dpadRight","L1","L2","L3","R1","R2","R3","A","B","X","Y","start","select","home","getDefaultSticks","L","inverts","R"],"mappings":"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","sourcesContent":["import { assignIn } from 'lodash/fp';\r\n\r\nimport { isButtonSignificant, findIndexes, isConsecutive } from '../common/utils';\r\nimport { CustomGamepad, ListenOptions, Button, Stick } from '../types';\r\n\r\nexport const mockGamepad: CustomGamepad = {\r\n  axes: [],\r\n  buttons: [],\r\n  rawPad: undefined,\r\n};\r\n\r\nexport function updateListenOptions(\r\n  listenOptions: ListenOptions,\r\n  pad: CustomGamepad,\r\n  threshold: number,\r\n) {\r\n  const {\r\n    callback,\r\n    quantity,\r\n    type,\r\n    currentValue,\r\n    targetValue,\r\n    useTimeStamp,\r\n    consecutive,\r\n    allowOffset,\r\n  } = listenOptions;\r\n\r\n  const indexes =\r\n    type === 'axes'\r\n      ? findIndexes((value) => Math.abs(value) > threshold, pad.axes)\r\n      : findIndexes((value) => isButtonSignificant(value, threshold), pad.buttons);\r\n\r\n  if (\r\n    indexes.length === quantity &&\r\n    (!consecutive || isConsecutive(indexes)) &&\r\n    (allowOffset || indexes[0] % quantity === 0)\r\n  ) {\r\n    if (useTimeStamp && currentValue === 0) {\r\n      return assignIn(listenOptions, { currentValue: Date.now() });\r\n    }\r\n\r\n    const comparison = useTimeStamp ? Date.now() - currentValue : currentValue + 1;\r\n\r\n    if (targetValue <= comparison) {\r\n      if (type === 'axes') {\r\n        callback([indexes]);\r\n      } else {\r\n        callback(indexes);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    if (!useTimeStamp) {\r\n      return assignIn(listenOptions, { currentValue: comparison });\r\n    }\r\n\r\n    return listenOptions;\r\n  }\r\n\r\n  return assignIn(listenOptions, { currentValue: 0 });\r\n}\r\n\r\nexport function getDefaultButtons(): Record<string, Button> {\r\n  return {\r\n    dpadUp: [12],\r\n    dpadDown: [13],\r\n    dpadLeft: [14],\r\n    dpadRight: [15],\r\n    L1: [4],\r\n    L2: [6],\r\n    L3: [10],\r\n    R1: [5],\r\n    R2: [7],\r\n    R3: [11],\r\n    A: [0],\r\n    B: [1],\r\n    X: [2],\r\n    Y: [3],\r\n    start: [9],\r\n    select: [8],\r\n    home: [16],\r\n  };\r\n}\r\n\r\nexport function getDefaultSticks(): Record<string, Stick> {\r\n  return {\r\n    L: {\r\n      indexes: [[0, 1]],\r\n      inverts: [false, false],\r\n    },\r\n    R: {\r\n      indexes: [[2, 3]],\r\n      inverts: [false, false],\r\n    },\r\n  };\r\n}\r\n"],"file":"baseUtils.js"}