{"version":3,"sources":["../../../src/baseModule/base.ts"],"names":["createModule","params","listenOptions","gamepadId","padId","connected","state","threshold","clampThreshold","pad","mockGamepad","prevPad","prevRumble","duration","weakMagnitude","strongMagnitude","lastRumbleUpdate","Date","now","lastUpdate","buttons","sticks","module","getPadId","isConnected","disconnect","connect","getConfig","JSON","stringify","setConfig","serializedString","parse","getButtonIndexes","inputNames","inputName","getStickIndexes","indexes","setButton","Error","setStick","inverts","length","invertSticks","stick","swapButtons","btn1","btn2","swapSticks","stick1","stick2","includeInverts","update","gamepad","axes","a","value","rawPad","isRumbleSupported","currentRumble","id","MAX_DURATION","cancelListen","listenButton","callback","quantity","waitFor","consecutive","allowOffset","type","currentValue","useTimeStamp","targetValue","listenAxis","buttonBindOnPress","allowDuplication","resultName","stickBindOnPress","indexesResult","padToTest","vibrationActuator","playEffect","stopRumble","channelName","addRumble","effect","destroy"],"mappings":"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","sourcesContent":["import {\r\n  findKey,\r\n  isEqual,\r\n  map,\r\n  assignIn,\r\n  forEach,\r\n  flow,\r\n  flatten,\r\n  uniq,\r\n  uniqBy,\r\n  toString,\r\n} from 'lodash/fp';\r\n\r\nimport { nameIsValid } from '../common/utils';\r\nimport { mockGamepad, getDefaultButtons, getDefaultSticks, updateListenOptions } from './baseUtils';\r\nimport {\r\n  stopRumble,\r\n  addRumble,\r\n  applyRumble,\r\n  getCurrentEffect,\r\n  updateChannels,\r\n  MAX_DURATION,\r\n} from './rumble';\r\nimport {\r\n  ListenOptions,\r\n  RawGamepad,\r\n  Effect,\r\n  BaseParams,\r\n  CustomGamepad,\r\n  StrictEffect,\r\n  Button,\r\n  Stick,\r\n} from '../types';\r\n\r\nexport type BaseModule = ReturnType<typeof createModule>;\r\n\r\ninterface BaseState {\r\n  threshold: number;\r\n  clampThreshold: boolean;\r\n  pad: CustomGamepad;\r\n  prevPad: CustomGamepad;\r\n  prevRumble: StrictEffect;\r\n  lastRumbleUpdate: number;\r\n  lastUpdate: number;\r\n\r\n  buttons: Record<string, Button>;\r\n  sticks: Record<string, Stick>;\r\n}\r\n\r\nexport default function createModule(params: BaseParams = {}) {\r\n  let listenOptions: ListenOptions | null = null;\r\n  let gamepadId = params.padId ? params.padId : null;\r\n  let connected = !!params.padId;\r\n\r\n  const state: BaseState = {\r\n    threshold: params.threshold || 0.2,\r\n    clampThreshold: params.clampThreshold !== false,\r\n    pad: mockGamepad,\r\n    prevPad: mockGamepad,\r\n    prevRumble: {\r\n      duration: 0,\r\n      weakMagnitude: 0,\r\n      strongMagnitude: 0,\r\n    },\r\n    lastRumbleUpdate: Date.now(),\r\n    lastUpdate: Date.now(),\r\n\r\n    buttons: getDefaultButtons(),\r\n    sticks: getDefaultSticks(),\r\n  };\r\n\r\n  const module = {\r\n    getPadId: () => gamepadId,\r\n\r\n    isConnected: () => connected,\r\n\r\n    disconnect: () => {\r\n      connected = false;\r\n    },\r\n\r\n    connect: (padId?: string) => {\r\n      connected = true;\r\n      if (padId) {\r\n        gamepadId = padId;\r\n      }\r\n    },\r\n\r\n    getConfig: () =>\r\n      JSON.stringify({\r\n        threshold: state.threshold,\r\n        clampThreshold: state.clampThreshold,\r\n        buttons: state.buttons,\r\n        sticks: state.sticks,\r\n      }),\r\n\r\n    setConfig: (serializedString: string) => assignIn(state, JSON.parse(serializedString)),\r\n\r\n    getButtonIndexes: (...inputNames: string[]) =>\r\n      flow(\r\n        map((inputName: string) => state.buttons[inputName]),\r\n        flatten,\r\n        uniq,\r\n      )(inputNames),\r\n\r\n    getStickIndexes: (...inputNames: string[]) =>\r\n      flow(\r\n        map((inputName: string) => state.sticks[inputName].indexes),\r\n        flatten,\r\n        uniqBy(toString),\r\n      )(inputNames),\r\n\r\n    setButton: (inputName: string, indexes: number[]) => {\r\n      if (!nameIsValid(inputName)) {\r\n        throw new Error(`On setButton('${inputName}'): argument contains invalid characters`);\r\n      }\r\n      state.buttons[inputName] = indexes;\r\n    },\r\n\r\n    setStick: (inputName: string, indexes: number[][], inverts?: boolean[]) => {\r\n      if (!nameIsValid(inputName)) {\r\n        throw new Error(`On setStick('${inputName}'): inputName contains invalid characters`);\r\n      }\r\n\r\n      if (indexes.length === 0) {\r\n        throw new Error(`On setStick('${inputName}', indexes): argument indexes is an empty array`);\r\n      }\r\n\r\n      state.sticks[inputName] = {\r\n        indexes,\r\n        inverts: inverts || map(() => false, indexes[0]),\r\n      };\r\n    },\r\n\r\n    invertSticks: (inverts: boolean[], ...inputNames: string[]) => {\r\n      forEach((inputName) => {\r\n        const stick = state.sticks[inputName];\r\n        if (stick.inverts.length === inverts.length) {\r\n          stick.inverts = inverts;\r\n        } else {\r\n          throw new Error(\r\n            `On invertSticks(inverts, [..., ${inputName}, ...]): given argument inverts' length does not match '${inputName}' axis' length`,\r\n          );\r\n        }\r\n      }, inputNames);\r\n    },\r\n\r\n    swapButtons: (btn1: string, btn2: string) => {\r\n      const { buttons } = state;\r\n      [buttons[btn1], buttons[btn2]] = [buttons[btn2], buttons[btn1]];\r\n    },\r\n\r\n    swapSticks: (stick1: string, stick2: string, includeInverts = false) => {\r\n      const { sticks } = state;\r\n      if (includeInverts) {\r\n        [sticks[stick1], sticks[stick2]] = [sticks[stick2], sticks[stick1]];\r\n      } else {\r\n        [sticks[stick1].indexes, sticks[stick2].indexes] = [\r\n          sticks[stick2].indexes,\r\n          sticks[stick1].indexes,\r\n        ];\r\n      }\r\n    },\r\n\r\n    update: (gamepad: RawGamepad) => {\r\n      state.prevPad = state.pad;\r\n      state.pad = {\r\n        axes: gamepad.axes as number[],\r\n        buttons: map((a) => a.value, gamepad.buttons),\r\n        rawPad: gamepad,\r\n      };\r\n\r\n      if (listenOptions) {\r\n        listenOptions = updateListenOptions(listenOptions, state.pad, state.threshold);\r\n      }\r\n\r\n      // Update rumble state\r\n\r\n      if (module.isRumbleSupported()) {\r\n        const now = Date.now();\r\n        const currentRumble = getCurrentEffect(gamepad.id);\r\n        updateChannels(gamepad.id, now - state.lastUpdate);\r\n\r\n        if (\r\n          state.prevRumble.weakMagnitude !== currentRumble.weakMagnitude ||\r\n          state.prevRumble.strongMagnitude !== currentRumble.strongMagnitude ||\r\n          now - state.lastRumbleUpdate >= MAX_DURATION / 2\r\n        ) {\r\n          applyRumble(gamepad, currentRumble);\r\n          state.prevRumble = currentRumble;\r\n          state.lastRumbleUpdate = now;\r\n        }\r\n\r\n        state.lastUpdate = now;\r\n      }\r\n    },\r\n\r\n    cancelListen: () => {\r\n      listenOptions = null;\r\n    },\r\n\r\n    listenButton: (\r\n      callback: (indexes: number[]) => void,\r\n      quantity = 1,\r\n      {\r\n        waitFor = [1, 'polls'],\r\n        consecutive = false,\r\n        allowOffset = true,\r\n      }: { waitFor?: [number, 'polls' | 'ms']; consecutive?: boolean; allowOffset?: boolean } = {},\r\n    ) => {\r\n      listenOptions = {\r\n        callback: callback as (indexes: number[] | number[][]) => void,\r\n        quantity,\r\n        type: 'buttons',\r\n        currentValue: 0,\r\n        useTimeStamp: waitFor[1] === 'ms',\r\n        targetValue: waitFor[0],\r\n        consecutive,\r\n        allowOffset,\r\n      };\r\n    },\r\n\r\n    listenAxis: (\r\n      callback: (indexes: number[][]) => void,\r\n      quantity = 2,\r\n      {\r\n        waitFor = [100, 'ms'],\r\n        consecutive = true,\r\n        allowOffset = true,\r\n      }: { waitFor?: [number, 'polls' | 'ms']; consecutive?: boolean; allowOffset?: boolean } = {},\r\n    ) => {\r\n      listenOptions = {\r\n        callback: callback as (indexes: number[] | number[][]) => void,\r\n        quantity,\r\n        type: 'axes',\r\n        currentValue: 0,\r\n        useTimeStamp: waitFor[1] === 'ms',\r\n        targetValue: waitFor[0],\r\n        consecutive,\r\n        allowOffset,\r\n      };\r\n    },\r\n\r\n    buttonBindOnPress: (\r\n      inputName: string,\r\n      callback: (buttonName?: string) => void,\r\n      allowDuplication = false,\r\n    ) => {\r\n      if (!nameIsValid(inputName)) {\r\n        throw new Error(\r\n          `On buttonBindOnPress('${inputName}'): inputName contains invalid characters`,\r\n        );\r\n      }\r\n\r\n      module.listenButton((indexes: number[]) => {\r\n        const resultName = findKey((value) => value[0] === indexes[0], state.buttons);\r\n\r\n        if (!allowDuplication && resultName && state.buttons[inputName]) {\r\n          module.swapButtons(inputName, resultName);\r\n        } else {\r\n          module.setButton(inputName, indexes);\r\n        }\r\n\r\n        callback(resultName);\r\n      });\r\n    },\r\n\r\n    stickBindOnPress: (\r\n      inputName: string,\r\n      callback: (stickName?: string) => void,\r\n      allowDuplication = false,\r\n    ) => {\r\n      if (!nameIsValid(inputName)) {\r\n        throw new Error(\r\n          `On stickBindOnPress('${inputName}'): inputName contains invalid characters`,\r\n        );\r\n      }\r\n\r\n      module.listenAxis((indexesResult: number[][]) => {\r\n        const resultName = findKey(({ indexes }) => isEqual(indexes, indexesResult), state.sticks);\r\n\r\n        if (!allowDuplication && resultName && state.sticks[inputName]) {\r\n          module.swapSticks(inputName, resultName);\r\n        } else {\r\n          module.setStick(inputName, indexesResult);\r\n        }\r\n\r\n        callback(resultName);\r\n      });\r\n    },\r\n\r\n    isRumbleSupported: (rawPad?: RawGamepad) => {\r\n      const padToTest = rawPad || state.pad.rawPad;\r\n      if (padToTest) {\r\n        return !!padToTest.vibrationActuator && !!padToTest.vibrationActuator.playEffect;\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n\r\n    stopRumble: (channelName?: string) => {\r\n      if (state.pad.rawPad) {\r\n        stopRumble(state.pad.rawPad.id, channelName);\r\n      }\r\n    },\r\n\r\n    addRumble: (effect: Effect | Effect[], channelName?: string) => {\r\n      if (state.pad.rawPad) {\r\n        addRumble(state.pad.rawPad.id, effect, channelName);\r\n      }\r\n    },\r\n\r\n    destroy: () => {\r\n      module.disconnect();\r\n      state.pad = mockGamepad;\r\n      state.prevPad = mockGamepad;\r\n    },\r\n  };\r\n\r\n  return { module, state };\r\n}\r\n"],"file":"base.js"}