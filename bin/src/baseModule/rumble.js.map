{"version":3,"sources":["../../../src/baseModule/rumble.ts"],"names":["MAX_DURATION","defaultChannel","allChannels","makeEffectStrict","effect","duration","weakMagnitude","strongMagnitude","Math","max","min","applyRumble","pad","vibrationActuator","Promise","reject","id","playEffect","stopRumble","padId","channelName","addRumble","map","getCurrentEffect","Object","values","reduce","sum","channel","curr","updateChannels","timeElapsed","channels","channelValue","result","filter"],"mappings":"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","sourcesContent":["import { isArray, mapValues } from 'lodash/fp';\r\n\r\nimport { RawGamepad, Effect, StrictEffect } from '../types';\r\n\r\ntype GamepadId = string;\r\ntype ChannelName = string;\r\n\r\nexport const MAX_DURATION = 5000;\r\nconst defaultChannel = 'default';\r\nconst allChannels: Record<GamepadId, Record<ChannelName, StrictEffect[]>> = {};\r\n\r\nexport function makeEffectStrict(effect: Effect | number): StrictEffect {\r\n  if (typeof effect === 'number') {\r\n    return {\r\n      duration: effect,\r\n      weakMagnitude: 0,\r\n      strongMagnitude: 0,\r\n    };\r\n  }\r\n\r\n  return {\r\n    duration: Math.max(0, effect.duration),\r\n    weakMagnitude: Math.min(1, Math.max(0, effect.weakMagnitude || 0)),\r\n    strongMagnitude: Math.min(1, Math.max(0, effect.strongMagnitude || 0)),\r\n  };\r\n}\r\n\r\nexport function applyRumble(pad: RawGamepad, effect: StrictEffect) {\r\n  if (!pad.vibrationActuator) {\r\n    return Promise.reject(\r\n      `Joymap rumble applyRumble: Gamepad ${pad.id} does not support haptic feedback`,\r\n    );\r\n  }\r\n\r\n  return pad.vibrationActuator.playEffect('dual-rumble', effect);\r\n}\r\n\r\nexport function stopRumble(padId: string, channelName = defaultChannel) {\r\n  if (!allChannels[padId]) {\r\n    allChannels[padId] = {};\r\n  }\r\n\r\n  allChannels[padId][channelName] = [];\r\n}\r\n\r\nexport function addRumble(\r\n  padId: string,\r\n  effect: Effect | (Effect | number)[],\r\n  channelName = defaultChannel,\r\n) {\r\n  if (!allChannels[padId]) {\r\n    allChannels[padId] = {};\r\n  }\r\n\r\n  allChannels[padId][channelName] = isArray(effect)\r\n    ? effect.map(makeEffectStrict)\r\n    : [makeEffectStrict(effect)];\r\n}\r\n\r\nexport function getCurrentEffect(padId: string): StrictEffect {\r\n  if (!allChannels[padId]) {\r\n    allChannels[padId] = {};\r\n  }\r\n\r\n  const strongMagnitude = Object.values(allChannels[padId]).reduce((sum, channel) => {\r\n    const curr = channel[0];\r\n    if (!!curr && typeof curr !== 'number') {\r\n      return sum + (curr.strongMagnitude || 0);\r\n    }\r\n    return sum;\r\n  }, 0);\r\n\r\n  const weakMagnitude = Object.values(allChannels[padId]).reduce((sum, channel) => {\r\n    const curr = channel[0];\r\n    if (!!curr && typeof curr !== 'number') {\r\n      return sum + (curr.weakMagnitude || 0);\r\n    }\r\n    return sum;\r\n  }, 0);\r\n\r\n  return {\r\n    strongMagnitude: Math.min(1, Math.max(0, strongMagnitude)),\r\n    weakMagnitude: Math.min(1, Math.max(0, weakMagnitude)),\r\n    duration: MAX_DURATION,\r\n  };\r\n}\r\n\r\nexport function updateChannels(padId: string, timeElapsed: number) {\r\n  if (!allChannels[padId]) {\r\n    allChannels[padId] = {};\r\n  }\r\n\r\n  allChannels[padId] = mapValues((channels) => {\r\n    let curr = timeElapsed;\r\n    return channels\r\n      .map((channelValue) => {\r\n        if (curr > 0) {\r\n          const result = Math.max(0, channelValue.duration - curr);\r\n          curr -= channelValue.duration;\r\n          channelValue.duration = result;\r\n        }\r\n\r\n        return channelValue;\r\n      })\r\n      .filter((channelValue) => {\r\n        return channelValue.duration > 0;\r\n      });\r\n  }, allChannels[padId]);\r\n}\r\n"],"file":"rumble.js"}