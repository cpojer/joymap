{"version":3,"sources":["../../../src/queryModule/query.ts"],"names":["emptyMapper","emptyStick","type","value","pressed","justChanged","inverts","emptyButton","createQueryModule","params","state","baseModule","module","mappers","buttonMapMemoized","buttonMap","stickMapMemoized","stickMap","getButton","inputName","isConnected","pad","prevPad","buttons","threshold","clampThreshold","getButtons","inputNames","result","mapperName","getAllButtons","button","getStick","sticks","indexes","getSticks","getAllSticks","stick","getMapper","getMappers","mapperNames","getAllMappers","mapper","setMapper","removeMapper","clearMappers","destroy"],"mappings":"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","sourcesContent":["import memoize from 'fast-memoize';\r\nimport { assignIn, mapValues, omit, forEach } from 'lodash/fp';\r\n\r\nimport { buttonMap, stickMap } from '../common/utils';\r\nimport createBaseModule from '../baseModule/base';\r\nimport { StickResult, ButtonResult } from '../types';\r\n\r\n// the following definition allows for the circular Mapper type\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface QueryModule extends ReturnType<typeof createQueryModule> {}\r\n\r\nexport type MapperResult = any;\r\n\r\nexport type Mapper = (module: QueryModule) => MapperResult;\r\n\r\nexport const emptyMapper: MapperResult = null;\r\n\r\nexport const emptyStick: StickResult = {\r\n  type: 'stick',\r\n  value: [0, 0],\r\n  pressed: false,\r\n  justChanged: false,\r\n  inverts: [false, false],\r\n};\r\n\r\nexport const emptyButton: ButtonResult = {\r\n  type: 'button',\r\n  value: 0,\r\n  pressed: false,\r\n  justChanged: false,\r\n};\r\n\r\nexport default function createQueryModule(params = {}) {\r\n  const { state, module: baseModule } = createBaseModule(params);\r\n\r\n  let mappers: Record<string, Mapper> = {};\r\n\r\n  const buttonMapMemoized = memoize(buttonMap);\r\n  const stickMapMemoized = memoize(stickMap);\r\n\r\n  const module = assignIn(baseModule, {\r\n    getButton: (inputName: string) => {\r\n      if (!module.isConnected()) {\r\n        return emptyButton;\r\n      }\r\n\r\n      return buttonMapMemoized(\r\n        state.pad,\r\n        state.prevPad,\r\n        state.buttons[inputName],\r\n        state.threshold,\r\n        state.clampThreshold,\r\n      );\r\n    },\r\n\r\n    getButtons: (...inputNames: string[]) => {\r\n      if (!module.isConnected()) {\r\n        const result: Record<string, ButtonResult> = {};\r\n        forEach((mapperName) => {\r\n          result[mapperName] = emptyButton;\r\n        }, inputNames);\r\n\r\n        return result;\r\n      }\r\n\r\n      const result: Record<string, ButtonResult> = {};\r\n      forEach((inputName) => {\r\n        result[inputName] = buttonMapMemoized(\r\n          state.pad,\r\n          state.prevPad,\r\n          state.buttons[inputName],\r\n          state.threshold,\r\n          state.clampThreshold,\r\n        );\r\n      }, inputNames);\r\n\r\n      return result;\r\n    },\r\n\r\n    getAllButtons: (): Record<string, ButtonResult> => {\r\n      if (!module.isConnected()) {\r\n        return mapValues(state.buttons, () => emptyButton);\r\n      }\r\n\r\n      return mapValues(\r\n        (button) =>\r\n          buttonMapMemoized(\r\n            state.pad,\r\n            state.prevPad,\r\n            button,\r\n            state.threshold,\r\n            state.clampThreshold,\r\n          ),\r\n        state.buttons,\r\n      );\r\n    },\r\n\r\n    getStick: (inputName: string) => {\r\n      if (!module.isConnected()) {\r\n        return emptyStick;\r\n      }\r\n\r\n      const { indexes, inverts } = state.sticks[inputName];\r\n      return stickMapMemoized(\r\n        state.pad,\r\n        state.prevPad,\r\n        indexes,\r\n        inverts,\r\n        state.threshold,\r\n        state.clampThreshold,\r\n      );\r\n    },\r\n\r\n    getSticks: (...inputNames: string[]) => {\r\n      if (!module.isConnected()) {\r\n        const result: Record<string, StickResult> = {};\r\n        forEach((mapperName) => {\r\n          result[mapperName] = emptyStick;\r\n        }, inputNames);\r\n\r\n        return result;\r\n      }\r\n\r\n      const result: Record<string, StickResult> = {};\r\n      forEach((inputName) => {\r\n        const { indexes, inverts } = state.sticks[inputName];\r\n        result[inputName] = stickMapMemoized(\r\n          state.pad,\r\n          state.prevPad,\r\n          indexes,\r\n          inverts,\r\n          state.threshold,\r\n          state.clampThreshold,\r\n        );\r\n      }, inputNames);\r\n\r\n      return result;\r\n    },\r\n\r\n    getAllSticks: (): Record<string, StickResult> => {\r\n      if (!module.isConnected()) {\r\n        return mapValues(state.sticks, () => emptyStick);\r\n      }\r\n\r\n      return mapValues((stick) => {\r\n        const { indexes, inverts } = stick;\r\n        return stickMapMemoized(\r\n          state.pad,\r\n          state.prevPad,\r\n          indexes,\r\n          inverts,\r\n          state.threshold,\r\n          state.clampThreshold,\r\n        );\r\n      }, state.sticks);\r\n    },\r\n\r\n    getMapper: (mapperName: string) => {\r\n      if (!module.isConnected()) {\r\n        const emptyMapper = null;\r\n        return emptyMapper;\r\n      }\r\n\r\n      return mappers[mapperName](module);\r\n    },\r\n\r\n    getMappers: (...mapperNames: string[]) => {\r\n      if (!module.isConnected()) {\r\n        const result: Record<string, MapperResult> = {};\r\n        forEach((mapperName) => {\r\n          result[mapperName] = emptyMapper;\r\n        }, mapperNames);\r\n\r\n        return result;\r\n      }\r\n\r\n      const result: Record<string, Mapper> = {};\r\n      forEach((mapperName) => {\r\n        result[mapperName] = mappers[mapperName](module);\r\n      }, mapperNames);\r\n\r\n      return result;\r\n    },\r\n\r\n    getAllMappers: (): Record<string, MapperResult> => {\r\n      if (!module.isConnected()) {\r\n        return mapValues(() => emptyMapper, mappers);\r\n      }\r\n\r\n      return mapValues((mapper) => mapper(module), mappers);\r\n    },\r\n\r\n    setMapper: (mapperName: string, mapper: Mapper) => {\r\n      mappers[mapperName] = mapper;\r\n    },\r\n\r\n    removeMapper: (mapperName: string) => {\r\n      mappers = omit([mapperName], mappers);\r\n    },\r\n\r\n    clearMappers: () => {\r\n      mappers = {};\r\n    },\r\n\r\n    destroy: () => {\r\n      baseModule.destroy();\r\n      module.clearMappers();\r\n    },\r\n  });\r\n\r\n  return module;\r\n}\r\n"],"file":"query.js"}