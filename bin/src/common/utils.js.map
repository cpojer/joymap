{"version":3,"sources":["../../../src/common/utils.ts"],"names":["isConsecutive","target","length","i","findIndexes","iterator","result","push","getRawGamepads","navigator","getGamepads","Array","from","gamepadIsValid","rawGamepad","connected","buttons","axes","timestamp","id","nameIsValid","name","test","isButtonSignificant","value","threshold","Math","abs","isStickSignificant","stickValue","squaredMagnitude","buttonMap","pad","prevPad","indexes","clampThreshold","prevPressed","pressed","prevValue","currValue","max","type","justChanged","roundSticks","indexMaps","stickNumber","axesSums","values","map","v","stickMap","inverts"],"mappings":"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","sourcesContent":["import { forEach, reduce, map } from 'lodash/fp';\r\nimport { CustomGamepad, RawGamepad, ButtonResult, StickResult } from '../types';\r\n\r\n// dev-helper type: expands object types one level deep\r\nexport type Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;\r\n\r\n// dev-helper type: expands object types recursively\r\nexport type ExpendRecursively<T> = T extends object\r\n  ? T extends infer O\r\n    ? { [K in keyof O]: ExpendRecursively<O[K]> }\r\n    : never\r\n  : T;\r\n\r\nexport function isConsecutive(target: number[]) {\r\n  const { length } = target;\r\n\r\n  if (length <= 1) {\r\n    return true;\r\n  }\r\n\r\n  let i = 0;\r\n  while (i < length - 1) {\r\n    if (target[i] + 1 !== target[i + 1]) {\r\n      return false;\r\n    }\r\n    i += 1;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function findIndexes(iterator: (a: number) => boolean, target: number[]) {\r\n  const { length } = target;\r\n  const result = [];\r\n  let i = 0;\r\n\r\n  while (i < length) {\r\n    if (iterator(target[i])) {\r\n      result.push(i);\r\n    }\r\n    i += 1;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function getRawGamepads(): (RawGamepad | null)[] {\r\n  if (navigator && navigator.getGamepads) {\r\n    return Array.from(navigator.getGamepads());\r\n  }\r\n  return [];\r\n}\r\n\r\nexport function gamepadIsValid(rawGamepad: RawGamepad | null) {\r\n  return (\r\n    !!rawGamepad &&\r\n    !!rawGamepad.connected &&\r\n    !!rawGamepad.buttons.length &&\r\n    !!rawGamepad.axes.length &&\r\n    rawGamepad.timestamp !== 0 &&\r\n    !!rawGamepad.id\r\n  );\r\n}\r\n\r\nexport function nameIsValid(name: string) {\r\n  return /^[a-z0-9]+$/i.test(name);\r\n}\r\n\r\nexport function isButtonSignificant(value = 0, threshold: number) {\r\n  return Math.abs(value) > threshold;\r\n}\r\n\r\nexport function isStickSignificant(stickValue: number[], threshold: number) {\r\n  const squaredMagnitude = reduce((result, value) => result + value ** 2, 0, stickValue);\r\n  return threshold * threshold < squaredMagnitude;\r\n}\r\n\r\nexport function buttonMap(\r\n  pad: CustomGamepad,\r\n  prevPad: CustomGamepad,\r\n  indexes: number[],\r\n  threshold: number,\r\n  clampThreshold: boolean,\r\n): ButtonResult {\r\n  const { length } = indexes;\r\n\r\n  let prevPressed = false;\r\n  let value = 0;\r\n  let pressed = false;\r\n\r\n  let i = 0;\r\n  while (i < length) {\r\n    if (!prevPressed) {\r\n      const prevValue = prevPad.buttons[indexes[i]] || 0;\r\n      prevPressed = isButtonSignificant(prevValue, threshold);\r\n    }\r\n\r\n    const currValue = pad.buttons[indexes[i]] || 0;\r\n    value = Math.max(value, currValue);\r\n    if (!pressed) {\r\n      pressed = isButtonSignificant(currValue, threshold);\r\n    }\r\n\r\n    i += 1;\r\n  }\r\n\r\n  return {\r\n    type: 'button',\r\n    value: !clampThreshold || pressed ? value : 0,\r\n    pressed,\r\n    justChanged: pressed !== prevPressed,\r\n  };\r\n}\r\n\r\nexport function roundSticks(indexMaps: number[][], axes: number[], threshold: number) {\r\n  let stickNumber = 0;\r\n  let axesSums: number[] = [];\r\n\r\n  forEach((indexes) => {\r\n    const values = map((i) => axes[i], indexes);\r\n\r\n    if (isStickSignificant(values, threshold)) {\r\n      axesSums = values.map((v, i) => v + (axesSums[i] || 0));\r\n      stickNumber += 1;\r\n    }\r\n  }, indexMaps);\r\n\r\n  return stickNumber === 0 ? map(() => 0, indexMaps[0]) : map((v) => v / stickNumber, axesSums);\r\n}\r\n\r\nexport function stickMap(\r\n  pad: CustomGamepad,\r\n  prevPad: CustomGamepad,\r\n  indexMaps: number[][],\r\n  inverts: boolean[],\r\n  threshold: number,\r\n  clampThreshold: boolean,\r\n): StickResult {\r\n  const prevPressed = isStickSignificant(\r\n    roundSticks(indexMaps, prevPad.axes, threshold),\r\n    threshold,\r\n  );\r\n  const value = roundSticks(indexMaps, pad.axes, threshold);\r\n  const pressed = isStickSignificant(value, threshold);\r\n\r\n  return {\r\n    type: 'stick',\r\n    value:\r\n      !clampThreshold || pressed\r\n        ? value.map((v, i) => (!inverts[i] ? v : v * -1))\r\n        : map(() => 0, value),\r\n    pressed,\r\n    justChanged: pressed !== prevPressed,\r\n    inverts,\r\n  };\r\n}\r\n"],"file":"utils.js"}